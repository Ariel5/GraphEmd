g <- sample_sbm(n, B, nrho); A <- g[]
tm.km1 <- system.time(km1 <- GraphEncoder(A, 3, clustering="kmeans"))[3]
tm.kmK <- system.time(kmK <- GraphEncoder(A, 2:5, clustering="kmeans"))[3]
tm.mc1 <- system.time(mc1 <- GraphEncoder(A, 3, clustering="mclust"))[3]
tm.mcK <- system.time(mcK <- GraphEncoder(A, 2:5, clustering="mclust"))[3]
tibble(i=i,
"K.km3" = max(km1$Y),
"K.km2:5" = max(kmK$Y),
"K.mc3" = max(mc1$Y),
"K.mc2:5" = max(mcK$Y),
"ari.km3" = adjustedRandIndex(km1$Y,Y),
"ari.km2:5" = adjustedRandIndex(kmK$Y,Y),
"ari.mc3" = adjustedRandIndex(mc1$Y,Y),
"ari.mc2:5" = adjustedRandIndex(mcK$Y,Y),
"tm.km3" = tm.km1,
"tm.km2:5" = tm.kmK,
"tm.mc3" = tm.mc1,
"tm.mc2:5" = tm.mcK)
}
save(out, file=paste0("AEE-bench-mc",nmc,".RData"))
} else {
load(paste0("AEE-bench-mc",nmc,".RData"))
}
suppressMessages(require(kableExtra))
out %>% round(2) %>% select(-contains("tm")) %>%
mutate(across(contains("K."), ~cell_spec(., bold=ifelse(. != K, T, F), color=ifelse(. != K, "red", "black")))) %>%
mutate(across(contains("ari"), ~cell_spec(., color=ifelse(. < 0.9, "red", "black")))) %>%
kbl(booktabs = T, linesep = "", escape=FALSE, digits=2) %>%
#    kable_material(c("striped", "hover", "condensed"), full_width = F) %>%
#     kable_classic(full_width = F, html_font = "Cambria")
kable_styling(bootstrap_options = "striped", full_width = F, position = "left")
a=GraphEncoder(A, 2:5)
a=GraphEncoder(as.matrix(g[]), 2:5)
# Build a 3-SBM
n <- 150
K <- 3
nrho <- rep(n, K)
n <- sum(nrho)
set.seed(1234)
B <- rbind(c(.1,.01,.05),
c(.01,.1,.025),
c(.05,.025,.15))
rho <- rep(1/3,K)
Y <- rep(1:K, each=n/K)
g <- sample_sbm(n, B, nrho); #summary(g)
V(g)$name <- 1:vcount(g); V(g)$color <- Y; summary(g)
a=GraphEncoder(as.matrix(g[]), 2:5)
source('C:/Work/Applications/GitHub/GraphNN/Main/GraphEncoder.R')
a=GraphEncoder(as.matrix(g[]), 2:5)
g <- sample_sbm(n, B, nrho); A <- g[]
GraphEncoder(A, [2:10])
GraphEncoder(A, 2:10)
result=GraphEncoder(A, 2:10);
result$meanSS
source('C:/Work/Applications/GitHub/GraphNN/Main/GraphEncoder.R')
g <- sample_sbm(n, B, nrho); A <- g[]
result=GraphEncoder(A, 2:10);
source('C:/Work/Applications/GitHub/GraphNN/Main/GraphEncoder.R')
result=GraphEncoder(A, 2:10);
3-c(1,1,1)
result$meanSS
source('C:/Work/Applications/GitHub/GraphNN/Main/GraphEncoder.R')
g <- sample_sbm(n, B, nrho); A <- g[]
result=GraphEncoder(A, 2:10);
source('C:/Work/Applications/GitHub/GraphNN/Main/GraphEncoder.R')
result=GraphEncoder(A, 2:10);
source('C:/Work/Applications/GitHub/GraphNN/Main/GraphEncoder.R')
result=GraphEncoder(A, 2:10);
source('C:/Work/Applications/GitHub/GraphNN/Main/GraphEncoder.R')
# Build a 3-SBM
n <- 150
K <- 3
nrho <- rep(n, K)
n <- sum(nrho)
set.seed(1234)
B <- rbind(c(.1,.01,.05),
c(.01,.1,.025),
c(.05,.025,.15))
rho <- rep(1/3,K)
Y <- rep(1:K, each=n/K)
g <- sample_sbm(n, B, nrho); #summary(g)
V(g)$name <- 1:vcount(g); V(g)$color <- Y; summary(g)
g <- sample_sbm(n, B, nrho); A <- g[]
result=GraphEncoder(A, 2:10);
# Build a 3-SBM
n <- 150
K <- 3
nrho <- rep(n, K)
n <- sum(nrho)
B <- rbind(c(.1,.01,.05),
c(.01,.1,.025),
c(.05,.025,.15))
rho <- rep(1/3,K)
Y <- rep(1:K, each=n/K)
g <- sample_sbm(n, B, nrho); #summary(g)
V(g)$name <- 1:vcount(g); V(g)$color <- Y; summary(g)
g <- sample_sbm(n, B, nrho); A <- g[]
result=GraphEncoder(A, 2:10);
source('C:/Work/Applications/GitHub/GraphNN/Main/GraphEncoder.R')
result=GraphEncoder(A, 2:10);
source('C:/Work/Applications/GitHub/GraphNN/Main/GraphEncoder.R')
result=GraphEncoder(A, 2:10);
result$meanSS
result=kmeans(c(1,1,2,2,3,3),3)
result=mclust(c(1,1,2,2,3,3),3)
result=Mclust(c(1,1,2,2,3,3),3)
result=Mclust(c(1,1,2,2,3,3))
install.packages("ClusterR")
source('C:/Work/Applications/GitHub/GraphNN/Main/GraphEncoder.R')
result= KMeans_rcpp(c(1,1,2,2,3,3),3)
require(ClusterR)
result= KMeans_rcpp(c(1,1,2,2,3,3),3)
result= KMeans_arma (c(1,1,2,2,3,3),3)
result= kMeans_rcpp(c(1,1,2,2,3,3),3)
result= kmeans_rcpp(c(1,1,2,2,3,3),3)
require(ClusterR)
result= kmeans_rcpp(c(1,1,2,2,3,3),3)
result= KMeans_rcpp(c(1,1,2,2,3,3),3)
install.packages("ClusterR")
LinkingTo: ClusterR
result= KMeans_rcpp(c(1,1,2,2,3,3),3)
matrix(0,3,3)-c(1,1,1)
matrix(3,3,3)-c(1,1,1)
matrix(3,3,3)-c(1,1,2)
c(1,1,2)
matrix(3,3,3)-t(c(1,1,2))
matrix(3,3,3)-c(1,1,2)
matrix(3,10,3)-c(1,1,2)
matrix(3,10,3)
matrix(3,10,3)-c(1,1,2)
matrix(3,10,3)+c(1,1,2)
sum(matrix(3,10,3),c(1,1,2))
matrix(3,10,3)+r(1,1,2)
matrix(3,10,3)+rbind(1,1,2)
matrix(3,10,3)$+$c(1,1,2)
matrix(3,10,3)&+&c(1,1,2)
matrix(3,10,3)&+&c(1,2)
matrix(3,10,3)+c(1,2)
matrix(3,10,3)+c(1,2,1)
matrix(c(1,1,2),3,1)
matrix(c(1,1,2),3,3)
matrix(c(1,1,2),1,3)
matrix(c(1,1,2),10,3)
replicate(c(1,1,2),3)
replicate(c(1,1,2),1,3)
replicate(c(1,1,2),3,3)
matrix(c(1,1,2), nrow=5, ncol=3, byrow=TRUE)
a=matrix(c(1,1,2), nrow=5, ncol=3, byrow=TRUE)
a[1,]
n <- 150
K <- 3
nrho <- rep(n, K)
n <- sum(nrho)
B <- rbind(c(.1,.01,.05),
c(.01,.1,.025),
c(.05,.025,.15))
rho <- rep(1/3,K)
Y <- rep(1:K, each=n/K)
g <- sample_sbm(n, B, nrho); #summary(g)
V(g)$name <- 1:vcount(g); V(g)$color <- Y; summary(g)
source('C:/Work/Applications/GitHub/GraphNN/Main/GraphEncoder.R')
n <- 150
K <- 3
nrho <- rep(n, K)
n <- sum(nrho)
B <- rbind(c(.1,.01,.05),
c(.01,.1,.025),
c(.05,.025,.15))
rho <- rep(1/3,K)
Y <- rep(1:K, each=n/K)
g <- sample_sbm(n, B, nrho); #summary(g)
V(g)$name <- 1:vcount(g); V(g)$color <- Y; summary(g)
g <- sample_sbm(n, B, nrho); A <- g[]
km1 <- GraphEncoder(A, 2:10)
km1 = GraphEncoder(A, 2:10)
source('C:/Work/Applications/GitHub/GraphNN/Main/GraphEncoder.R')
km1 = GraphEncoder(A, 2:10)
source('C:/Work/Applications/GitHub/GraphNN/Main/GraphEncoder.R')
km1 = GraphEncoder(A, 2:10)
source('C:/Work/Applications/GitHub/GraphNN/Main/GraphEncoder.R')
km1 = GraphEncoder(A, 2:10)
source('C:/Work/Applications/GitHub/GraphNN/Main/GraphEncoder.R')
km1 = GraphEncoder(A, 2:10)
source('C:/Work/Applications/GitHub/GraphNN/Main/GraphEncoder.R')
km1 = GraphEncoder(A, 2:10)
source('C:/Work/Applications/GitHub/GraphNN/Main/GraphEncoder.R')
km1 = GraphEncoder(A, 2:10)
source('C:/Work/Applications/GitHub/GraphNN/Main/GraphEncoder.R')
km1 = GraphEncoder(A, 2:10)
km1 = GraphEncoder(A, 2:10)
source('C:/Work/Applications/GitHub/GraphNN/Main/GraphEncoder.R')
km1 = GraphEncoder(A, 2:10)
source('C:/Work/Applications/GitHub/GraphNN/Main/GraphEncoder.R')
km1 = GraphEncoder(A, 2:10)
matrix(c(1,2,3), nrow=5, ncol=1, byrow=TRUE)
matrix(c(1,2,3), nrow=5, ncol=3, byrow=TRUE)
rowNorms(matrix(c(1,2,3), nrow=5, ncol=3, byrow=TRUE))
source('C:/Work/Applications/GitHub/GraphNN/Main/GraphEncoder.R')
km1 = GraphEncoder(A, 2:10)
source('C:/Work/Applications/GitHub/GraphNN/Main/GraphEncoder.R')
km1 = GraphEncoder(A, 2:10)
source('C:/Work/Applications/GitHub/GraphNN/Main/GraphEncoder.R')
km1 = GraphEncoder(A, 2:10)
source('C:/Work/Applications/GitHub/GraphNN/Main/GraphEncoder.R')
km1 = GraphEncoder(A, 2:10)
source('C:/Work/Applications/GitHub/GraphNN/Main/GraphEncoder.R')
km1 = GraphEncoder(A, 2:10)
source('C:/Work/Applications/GitHub/GraphNN/Main/GraphEncoder.R')
km1 = GraphEncoder(A, 2:10)
km1 = GraphEncoder(A, 2:10)
source('C:/Work/Applications/GitHub/GraphNN/Main/GraphEncoder.R')
km1 = GraphEncoder(A, 2:10)
source('C:/Work/Applications/GitHub/GraphNN/Main/GraphEncoder.R')
km1 = GraphEncoder(A, 2:10)
source('C:/Work/Applications/GitHub/GraphNN/Main/GraphEncoder.R')
km1 = GraphEncoder(A, 2:10)
source('C:/Work/Applications/GitHub/GraphNN/Main/GraphEncoder.R')
km1 = GraphEncoder(A, 2:10)
result <- GraphEncoder(A, 2:10)
km1 = GraphEncoder(A, 2:10)
source('C:/Work/Applications/GitHub/GraphNN/Main/GraphEncoder.R')
km1 = GraphEncoder(A, 2:10)
source('C:/Work/Applications/GitHub/GraphNN/Main/GraphEncoder.R')
km1 = GraphEncoder(A, 2:10)
source('C:/Work/Applications/GitHub/GraphNN/Main/GraphEncoder.R')
km1 = GraphEncoder(A, 2:10)
source('C:/Work/Applications/GitHub/GraphNN/Main/GraphEncoder.R')
km1 = GraphEncoder(A, 2:10)
source('C:/Work/Applications/GitHub/GraphNN/Main/GraphEncoder.R')
km1 = GraphEncoder(A, 2:10)
source('C:/Work/Applications/GitHub/GraphNN/Main/GraphEncoder.R')
km1 = GraphEncoder(A, 2:10)
rowNorms(c(1,2,3))
kmeans(c(1,1,2,2,3,3),3);
a=kmeans(c(1,1,2,2,3,3),3)
a$withinss
source('C:/Work/Applications/GitHub/GraphNN/Main/GraphEncoder.R')
km1 = GraphEncoder(A, 2:10)
source('C:/Work/Applications/GitHub/GraphNN/Main/GraphEncoder.R')
km1 = GraphEncoder(A, 2:10)
source('C:/Work/Applications/GitHub/GraphNN/Main/GraphEncoder.R')
km1 = GraphEncoder(A, 2:10)
source('C:/Work/Applications/GitHub/GraphNN/Main/GraphEncoder.R')
km1 = GraphEncoder(A, 2:10)
source('C:/Work/Applications/GitHub/GraphNN/Main/GraphEncoder.R')
km1 = GraphEncoder(A, 2:10)
source('C:/Work/Applications/GitHub/GraphNN/Main/GraphEncoder.R')
km1 = GraphEncoder(A, 2:10)
source('C:/Work/Applications/GitHub/GraphNN/Main/GraphEncoder.R')
km1 = GraphEncoder(A, 2:10)
source('C:/Work/Applications/GitHub/GraphNN/Main/GraphEncoder.R')
km1 = GraphEncoder(A, 2:10)
source('C:/Work/Applications/GitHub/GraphNN/Main/GraphEncoder.R')
km1 = GraphEncoder(A, 2:10)
source('C:/Work/Applications/GitHub/GraphNN/Main/GraphEncoder.R')
km1 = GraphEncoder(A, 2:10)
km1$meanSS
n <- 150
K <- 3
nrho <- rep(n, K)
n <- sum(nrho)
B <- rbind(c(.1,.01,.05),
c(.01,.1,.025),
c(.05,.025,.15))
rho <- rep(1/3,K)
Y <- rep(1:K, each=n/K)
g <- sample_sbm(n, B, nrho); #summary(g)
V(g)$name <- 1:vcount(g); V(g)$color <- Y; summary(g)
g <- sample_sbm(n, B, nrho); A <- g[]
km1 = GraphEncoder(A, 2:10)
g <- sample_sbm(n, B, nrho); A <- g[]
km1 = GraphEncoder(A, 2:10)
source('C:/Work/Applications/GitHub/GraphNN/Main/GraphEncoder.R')
km1 = GraphEncoder(A, 2:10)
n <- 150
K <- 3
nrho <- rep(n, K)
n <- sum(nrho)
B <- rbind(c(.1,.01,.05),
c(.01,.1,.025),
c(.05,.025,.15))
rho <- rep(1/3,K)
Y <- rep(1:K, each=n/K)
g <- sample_sbm(n, B, nrho); #summary(g)
V(g)$name <- 1:vcount(g); V(g)$color <- Y; summary(g)
g <- sample_sbm(n, B, nrho); A <- g[]
km1 = GraphEncoder(A, 2:10)
km1$meanSS
source('C:/Work/Applications/GitHub/GraphNN/Main/GraphEncoder.R')
km1 = GraphEncoder(A, 2:10)
km1$meanSS
g <- sample_sbm(n, B, nrho); A <- g[]
km1 = GraphEncoder(A, 2:10)
a=kmeans(c(0,2,5,5,10,10),3)
rowNorms(0-1)^2
rowNorms(-1)^2
g <- sample_sbm(n, B, nrho); A <- g[]
a=kmeans(c(0,2,5,5,10,10),3)
km1 = GraphEncoder(A, 2:10)
km1$meanSS
source('C:/Work/Applications/GitHub/GraphNN/Main/GraphEncoder.R')
km1 = GraphEncoder(A, 2:10)
source('C:/Work/Applications/GitHub/GraphNN/Main/GraphEncoder.R')
km1 = GraphEncoder(A, 2:10)
source('C:/Work/Applications/GitHub/GraphNN/Main/GraphEncoder.R')
km1 = GraphEncoder(A, 2:10)
n <- 150
K <- 3
nrho <- rep(n, K)
n <- sum(nrho)
B <- rbind(c(.1,.01,.05),
c(.01,.1,.025),
c(.05,.025,.15))
rho <- rep(1/3,K)
Y <- rep(1:K, each=n/K)
g <- sample_sbm(n, B, nrho); #summary(g)
V(g)$name <- 1:vcount(g); V(g)$color <- Y; summary(g)
g <- sample_sbm(n, B, nrho); A <- g[]
km1 = GraphEncoder(A, 2:10)
km1$meanSS
km1$meanSS*450
km1$meanSS*45
n <- 150
K <- 3
nrho <- rep(n, K)
n <- sum(nrho)
B <- rbind(c(.1,.01,.05),
c(.01,.1,.025),
c(.05,.025,.15))
rho <- rep(1/3,K)
Y <- rep(1:K, each=n/K)
g <- sample_sbm(n, B, nrho); #summary(g)
V(g)$name <- 1:vcount(g); V(g)$color <- Y; summary(g)
g <- sample_sbm(n, B, nrho); A <- g[]
km1 = GraphEncoder(A, 2:10)
c(1,2,3)^2
source('C:/Work/Applications/GitHub/GraphNN/Main/GraphEncoder.R', encoding = 'UTF-8')
#pacman::p_load(irlba, igraph, mclust, Matrix, lubridate, scales, vegan, broom, tidyverse, gmmase, ggrepel)
suppressMessages(require(igraph))
suppressMessages(require(mclust))
suppressMessages(require(tidyverse))
suppressMessages(require(doParallel))
registerDoParallel(detectCores()/2)
# Build a 3-SBM
nk <- 150
K <- 3
nrho <- rep(nk, K)
n <- sum(nrho)
set.seed(1234)
B <- rbind(c(.1,.01,.05),
c(.01,.1,.025),
c(.05,.025,.15))
rho <- rep(1/3,K)
Y <- rep(1:K, each=n/K)
source("GraphEncoder.R")
nmc <- 10
out <- foreach(i = 1:nmc, .combine='rbind') %dopar% {
set.seed(123+i)
g <- sample_sbm(n, B, nrho); A <- g[]
tm.km1 <- system.time(km1 <- GraphEncoder(A, 3))[3]
tm.kmK <- system.time(kmK <- GraphEncoder(A, 2:5))[3]
tibble(i=i,
"K.km3" = max(km1$Y),
"K.km2:5" = max(kmK$Y),
"ari.km3" = adjustedRandIndex(km1$Y,Y),
"ari.km2:5" = adjustedRandIndex(kmK$Y,Y),
"tm.km3" = tm.km1,
"tm.km2:5" = tm.kmK)
}
out %>% select(i, contains("K.")) %>% gather("method","Khat", -i) %>%
ggplot(aes(x=method, y=Khat, color=method, fill=method)) +
geom_jitter(width=0.2, height=0, alpha=0.9) +
#    geom_boxplot(width=0.1, notch = TRUE, color="black", fill=NA, alpha=0.5, outlier.size=0) +
geom_boxplot(notch = TRUE, alpha=0.5, outlier.size=0) + theme(legend.position = "none")
pacman::p_load(irlba, igraph, mclust, Matrix, lubridate, scales, vegan, broom, tidyverse, gmmase, ggrepel)
suppressMessages(require(igraph))
suppressMessages(require(mclust))
suppressMessages(require(tidyverse))
suppressMessages(require(doParallel))
registerDoParallel(detectCores()/2)
nk <- 150
K <- 3
nrho <- rep(nk, K)
n <- sum(nrho)
set.seed(1234)
B <- rbind(c(.1,.01,.05),
c(.01,.1,.025),
c(.05,.025,.15))
rho <- rep(1/3,K)
Y <- rep(1:K, each=n/K)
source("GraphEncoder.R")
nmc <- 10
out <- foreach(i = 1:nmc, .combine='rbind') %dopar% {
set.seed(123+i)
g <- sample_sbm(n, B, nrho); A <- g[]
tm.km1 <- system.time(km1 <- GraphEncoder(A, 3))[3]
tm.kmK <- system.time(kmK <- GraphEncoder(A, 2:5))[3]
tibble(i=i,
"K.km3" = max(km1$Y),
"K.km2:5" = max(kmK$Y),
"ari.km3" = adjustedRandIndex(km1$Y,Y),
"ari.km2:5" = adjustedRandIndex(kmK$Y,Y),
"tm.km3" = tm.km1,
"tm.km2:5" = tm.kmK)
}
out %>% select(i, contains("K.")) %>% gather("method","Khat", -i) %>%
ggplot(aes(x=method, y=Khat, color=method, fill=method)) +
geom_jitter(width=0.2, height=0, alpha=0.9) +
#    geom_boxplot(width=0.1, notch = TRUE, color="black", fill=NA, alpha=0.5, outlier.size=0) +
geom_boxplot(notch = TRUE, alpha=0.5, outlier.size=0) + theme(legend.position = "none")
g <- sample_sbm(n, B, nrho); A <- g[]
out <- foreach(i = 1:nmc, .combine='rbind') %dopar% {
set.seed(123+i)
g <- sample_sbm(n, B, nrho); A <- g[]
tm.km1 <- system.time(km1 <- GraphEncoder(A, 3))[3]
tm.kmK <- system.time(kmK <- GraphEncoder(A, 2:5))[3]
tibble(i=i,
"K.km3" = max(km1$Y),
"K.km2:5" = max(kmK$Y),
"ari.km3" = adjustedRandIndex(km1$Y,Y),
"ari.km2:5" = adjustedRandIndex(kmK$Y,Y),
"tm.km3" = tm.km1,
"tm.km2:5" = tm.kmK)
}
out <- foreach(i = 1:nmc, .combine='rbind') {
set.seed(123+i)
g <- sample_sbm(n, B, nrho); A <- g[]
tm.km1 <- system.time(km1 <- GraphEncoder(A, 3))[3]
tm.kmK <- system.time(kmK <- GraphEncoder(A, 2:5))[3]
out <- matrix(0, nmc, 7)
for (i in 1:nmc) {
set.seed(123+i)
g <- sample_sbm(n, B, nrho); A <- g[]
tm.km1 <- system.time(km1 <- GraphEncoder(A, 3))[3]
tm.kmK <- system.time(kmK <- GraphEncoder(A, 2:5))[3]
out[i,] <-  c(i, max(km1$Y), max(kmK$Y), adjustedRandIndex(km1$Y,Y), adjustedRandIndex(kmK$Y,Y), tm.km1, tm.kmK)
}
out <- as.data.frame(out)
names(out) <- c("i", "K.km3", "K.km2:5", "ari.km3", "ari.km2:5", "tm.km3", "tm.km2:5")
nmc <- 50
out <- matrix(0, nmc, 7)
for (i in 1:nmc) {
g <- sample_sbm(n, B, nrho); A <- g[]
tm.km1 <- system.time(km1 <- GraphEncoder(A, 3))[3]
tm.kmK <- system.time(kmK <- GraphEncoder(A, 2:5))[3]
out[i,] <-  c(i, max(km1$Y), max(kmK$Y), adjustedRandIndex(km1$Y,Y), adjustedRandIndex(kmK$Y,Y), tm.km1, tm.kmK)
}
View(out)
kmK <- GraphEncoder(A, 2:10)
g <- sample_sbm(n, B, nrho); A <- g[]
kmK <- GraphEncoder(A, 2:10)
kmeans(c(-1,1,9,11),2)
a=kmeans(c(-1,1,9,11),2)
a=kmeans(c(-1,1,9,11,19,21),3)
a=kmeans(c(-1,2,9,11,19,21),3)
a$withinss/a$size
b=c(-1,2,9,11,19,21);
b=matrix(t(b),6,2)
b
a=kmeans(b,3)
tmp=a$withinss
tmpBetween=matrix(0, nrow = 3, ncol = 1)
tmpCount=a$size
for (i in 1:3){
tmpBetween[i]=sum(rowNorms(b-matrix(a$centers[i], nrow=n, ncol=3, byrow=TRUE)));
}
b=c(-1,2,9,11,19,21);
b=matrix(t(b),6,3)
a=kmeans(b,3)
tmp=a$withinss
tmpBetween=matrix(0, nrow = 3, ncol = 1)
tmpCount=a$size
for (i in 1:3){
tmpBetween[i]=sum(rowNorms(b-matrix(a$centers[i], nrow=n, ncol=3, byrow=TRUE)));
}
a=kmeans(b,3)
a$centers
a$centers[1]
a$centers[,1]
for (i in 1:3){
tmpBetween[i]=sum(rowNorms(b-matrix(a$centers[,i], nrow=n, ncol=3, byrow=TRUE)));
}
for (i in 1:3){
tmpBetween[i]=sum(rowNorms(b-matrix(a$centers[,i], nrow=6, ncol=3, byrow=TRUE)));
}
matrix(a$centers[,1], nrow=6, ncol=3, byrow=TRUE)
a$centers[,1]
a$centers[1,]
for (i in 1:3){
tmpBetween[i]=sum(rowNorms(b-matrix(a$centers[i,], nrow=6, ncol=3, byrow=TRUE)));
}
nmc <- 10
out <- matrix(0, nmc, 7)
for (i in 1:nmc) {
set.seed(123+i)
g <- sample_sbm(n, B, nrho); A <- g[]
tm.km1 <- system.time(km1 <- GraphEncoder(A, 3))[3]
tm.kmK <- system.time(kmK <- GraphEncoder(A, 2:5))[3]
out[i,] <-  c(i, max(km1$Y), max(kmK$Y), adjustedRandIndex(km1$Y,Y), adjustedRandIndex(kmK$Y,Y), tm.km1, tm.kmK)
}
View(out)
source('C:/Work/Applications/GitHub/GraphNN/Main/GraphEncoder.R')
nmc <- 10
out <- matrix(0, nmc, 7)
for (i in 1:nmc) {
set.seed(123+i)
g <- sample_sbm(n, B, nrho); A <- g[]
tm.km1 <- system.time(km1 <- GraphEncoder(A, 3))[3]
tm.kmK <- system.time(kmK <- GraphEncoder(A, 2:5))[3]
out[i,] <-  c(i, max(km1$Y), max(kmK$Y), adjustedRandIndex(km1$Y,Y), adjustedRandIndex(kmK$Y,Y), tm.km1, tm.kmK)
}
View(out)
