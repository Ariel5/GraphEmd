}
}
for (r in 1:MaxIter) {
resTmp = GraphEncoderMain(X, Y2, Laplacian, Correlation);
#mc = Mclust(restmp$Z, verbose = FALSE);
#Y = mc$class;
mc = kmeans(resTmp$Z, K, iter.max = 5);
tmp = mc$tot.withinss;
Y3 = mc$cluster;
#ariv[i] = adjustedRandIndex(Y2, Y);
if (adjustedRandIndex(Y2, Y3) == 1) {
stop()
} else {
Y2 = matrix(Y3, n, 1);
}
}
for (r in 1:MaxIter) {
resTmp = GraphEncoderMain(X, Y2, Laplacian, Correlation);
#mc = Mclust(restmp$Z, verbose = FALSE);
#Y = mc$class;
mc = kmeans(resTmp$Z, K, iter.max = 5);
tmp = mc$tot.withinss;
Y3 = mc$cluster;
#ariv[i] = adjustedRandIndex(Y2, Y);
if (adjustedRandIndex(Y2, Y3) == 1) {
stop()
} else {
Y2 = matrix(Y3, n, 1);
}
}
for (r in 1:MaxIter) {
resTmp = GraphEncoderMain(X, Y2, Laplacian, Correlation);
#mc = Mclust(restmp$Z, verbose = FALSE);
#Y = mc$class;
mc = kmeans(resTmp$Z, K, iter.max = 5);
tmp = mc$tot.withinss;
Y3 = mc$cluster;
#ariv[i] = adjustedRandIndex(Y2, Y);
if (adjustedRandIndex(Y2, Y3) == 1) {
stop()
} else {
Y2 = matrix(Y3, n, 1);
}
}
for (r in 1:MaxIter) {
resTmp = GraphEncoderMain(X, Y2, Laplacian, Correlation);
#mc = Mclust(restmp$Z, verbose = FALSE);
#Y = mc$class;
mc = kmeans(resTmp$Z, K, iter.max = 5);
tmp = mc$tot.withinss;
Y3 = mc$cluster;
#ariv[i] = adjustedRandIndex(Y2, Y);
if (adjustedRandIndex(Y2, Y3) == 1) {
stop()
} else {
Y2 = matrix(Y3, n, 1);
}
}
for (r in 1:MaxIter) {
resTmp = GraphEncoderMain(X, Y2, Laplacian, Correlation);
#mc = Mclust(restmp$Z, verbose = FALSE);
#Y = mc$class;
mc = kmeans(resTmp$Z, K, iter.max = 5);
tmp = mc$tot.withinss;
Y3 = mc$cluster;
ariv = adjustedRandIndex(Y2, Y3);
if (ariv == 1) {
stop()
} else {
Y2 = matrix(Y3, n, 1);
}
}
r=1;
resTmp = GraphEncoderMain(X, Y2, Laplacian, Correlation);
#mc = Mclust(restmp$Z, verbose = FALSE);
#Y = mc$class;
mc = kmeans(resTmp$Z, K, iter.max = 5);
tmp = mc$tot.withinss;
Y3 = mc$cluster;
ariv = adjustedRandIndex(Y2, Y3);
resTmp = GraphEncoderMain(X, Y2, Laplacian, Correlation);
#mc = Mclust(restmp$Z, verbose = FALSE);
#Y = mc$class;
mc = kmeans(resTmp$Z, K, iter.max = 5);
tmp = mc$tot.withinss;
Y3 = mc$cluster;
ariv = adjustedRandIndex(Y2, Y3);
resTmp = GraphEncoderMain(X, Y2, Laplacian, Correlation);
#mc = Mclust(restmp$Z, verbose = FALSE);
#Y = mc$class;
mc = kmeans(resTmp$Z, K, iter.max = 5);
tmp = mc$tot.withinss;
Y3 = mc$cluster;
ariv = adjustedRandIndex(Y2, Y3);
resTmp = GraphEncoderMain(X, Y2, Laplacian, Correlation);
#mc = Mclust(restmp$Z, verbose = FALSE);
#Y = mc$class;
mc = kmeans(resTmp$Z, K, iter.max = 5);
tmp = mc$tot.withinss;
Y3 = mc$cluster;
ariv = adjustedRandIndex(Y2, Y3);
resTmp = GraphEncoderMain(X, Y2, Laplacian, Correlation);
#mc = Mclust(restmp$Z, verbose = FALSE);
#Y = mc$class;
mc = kmeans(resTmp$Z, K, iter.max = 5);
tmp = mc$tot.withinss;
Y3 = mc$cluster;
ariv = adjustedRandIndex(Y2, Y3);
for (rep in 1:Replicates){
Y2 = matrix(sample(K,n,rep=T), n, 1);
for (r in 1:MaxIter) {
resTmp = GraphEncoderMain(X, Y2, Laplacian, Correlation);
#mc = Mclust(restmp$Z, verbose = FALSE);
#Y = mc$class;
mc = kmeans(resTmp$Z, K, iter.max = 5);
tmp = mc$tot.withinss;
Y3 = mc$cluster;
ariv = adjustedRandIndex(Y2, Y3);
if (ariv == 1) {
break
} else {
Y2 = matrix(Y3, n, 1);
}
}
if (tmp<sumD){
sumD=tmp;
Y=Y3;
result=resTmp;
}
}
result=GraphEncoder(as.matrix(cora_edges),3)
source('C:/Work/Applications/GitHub/GraphNN/Main/GraphEncoder.R', encoding = 'UTF-8')
result=GraphEncoder(as.matrix(cora_edges),3)
result=GraphEncoder(as.matrix(cora_edges),4)
result=GraphEncoder(as.matrix(cora_edges),5)
result=GraphEncoder(as.matrix(cora_edges),6)
result=GraphEncoder(as.matrix(cora_edges),7)
result=GraphEncoder(as.matrix(cora_edges),5)
source('C:/Work/Applications/GitHub/GraphNN/Main/GraphEncoder.R', encoding = 'UTF-8')
result=GraphEncoder(as.matrix(cora_edges),5)
result=GraphEncoder(as.matrix(cora_edges),2)
source('C:/Work/Applications/GitHub/GraphNN/Main/GraphEncoder.R', encoding = 'UTF-8')
result=GraphEncoder(as.matrix(cora_edges),2)
result=GraphEncoder(as.matrix(cora_edges),3)
result=GraphEncoder(as.matrix(cora_edges),4)
result=GraphEncoder(as.matrix(cora_edges),5)
result=GraphEncoder(as.matrix(cora_edges),2)
result=GraphEncoder(as.matrix(cora_edges),5)
result=GraphEncoder(as.matrix(cora_edges),7)
result=GraphEncoder(as.matrix(cora_edges),10)
result=GraphEncoder(as.matrix(cora_edges),20)
result=GraphEncoder(as.matrix(cora_edges),10)
result=GraphEncoder(as.matrix(cora_edges),2)
source('C:/Work/Applications/GitHub/GraphNN/Main/GraphEncoder.R', encoding = 'UTF-8')
result=GraphEncoder(as.matrix(cora_edges),2)
result=GraphEncoder(as.matrix(cora_edges),10)
result=GraphEncoder(as.matrix(cora_edges),2)
source('C:/Work/Applications/GitHub/GraphNN/Main/GraphEncoder.R', encoding = 'UTF-8')
result=GraphEncoder(as.matrix(cora_edges),10)
source('C:/Work/Applications/GitHub/GraphNN/Main/GraphEncoder.R', encoding = 'UTF-8')
result=GraphEncoder(as.matrix(cora_edges),10)
result=GraphEncoder(as.matrix(cora_edges),3)
result=GraphEncoder(as.matrix(cora_edges),7)
result=GraphEncoder(as.matrix(cora_edges),6)
result=GraphEncoder(as.matrix(cora_edges),9)
result=GraphEncoder(as.matrix(cora_edges),8)
source('C:/Work/Applications/GitHub/GraphNN/Main/GraphEncoder.R', encoding = 'UTF-8')
result=GraphEncoder(as.matrix(cora_edges),8)
source('C:/Work/Applications/GitHub/GraphNN/Main/GraphEncoder.R', encoding = 'UTF-8')
result=GraphEncoder(as.matrix(cora_edges),8)
require(igraph)
X=matrix(1, nrow = 5, ncol = 5);
X = graph.adjacency(X,weighted=TRUE);
X = as.matrix(get.edgelist(X));
X
X=matrix(1, nrow = 5, ncol = 5);
X=matrix(1, nrow = 5, ncol = 5);
X[1,2]=2;
X[2,1]=2;
X = graph.adjacency(X,weighted=TRUE);
X = as.matrix(get.edgelist(X));
X
X=matrix(1, nrow = 5, ncol = 5);
X[1,2]=2;
X = graph.adjacency(X,weighted=TRUE);
X = as.matrix(get.data.frame(g));
X = as.matrix(get.data.frame(X));
X
X=matrix(1, nrow = 5, ncol = 5);
X = graph.adjacency(X,weighted=TRUE);
X = as.matrix(get.data.frame(X));
GraphEncoder(X,2)
source('C:/Work/Applications/GitHub/GraphNN/Main/GraphEncoder.R', encoding = 'UTF-8')
result=GraphEncoder(as.matrix(cora_edges),8)
c(2:5)
length(c(2:5))
source('C:/Work/Applications/GitHub/GraphNN/Main/GraphEncoder.R', encoding = 'UTF-8')
source('C:/Work/Applications/GitHub/GraphNN/Main/GraphEncoder.R', encoding = 'UTF-8')
source('C:/Work/Applications/GitHub/GraphNN/Main/GraphEncoder.R', encoding = 'UTF-8')
result=GraphEncoder(as.matrix(cora_edges),8)
source('C:/Work/Applications/GitHub/GraphNN/Main/GraphEncoder.R', encoding = 'UTF-8')
result=GraphEncoder(as.matrix(cora_edges),8)
# Build a 3-SBM
n <- 150
K <- 3
nrho <- rep(n, K)
n <- sum(nrho)
set.seed(1234)
B <- rbind(c(.1,.01,.05),
c(.01,.1,.025),
c(.05,.025,.15))
rho <- rep(1/3,K)
Y <- rep(1:K, each=n/K)
g <- sample_sbm(n, B, nrho); #summary(g)
V(g)$name <- 1:vcount(g); V(g)$color <- Y; summary(g)
result=GraphEncoder(as.matrix(g[]),3);
result=GraphEncoder(as.matrix(g[]));
matrix(0, nrow = 3, ncol = 1)
source('C:/Work/Applications/GitHub/GraphNN/Main/GraphEncoder.R', encoding = 'UTF-8')
result=GraphEncoder(as.matrix(g[]));
X = as.matrix(get.data.frame(g));
max(max(X))
source('C:/Work/Applications/GitHub/GraphNN/Main/GraphEncoder.R', encoding = 'UTF-8')
result=GraphEncoder(as.matrix(g[]));
source('C:/Work/Applications/GitHub/GraphNN/Main/GraphEncoder.R', encoding = 'UTF-8')
result=GraphEncoder(as.matrix(g[]));
c(1)
source('C:/Work/Applications/GitHub/GraphNN/Main/GraphEncoder.R', encoding = 'UTF-8')
result=GraphEncoder(as.matrix(g[]),3);
source('C:/Work/Applications/GitHub/GraphNN/Main/GraphEncoder.R', encoding = 'UTF-8')
result=GraphEncoder(as.matrix(g[]),3);
source('C:/Work/Applications/GitHub/GraphNN/Main/GraphEncoder.R', encoding = 'UTF-8')
result=GraphEncoder(as.matrix(g[]),3);
source('C:/Work/Applications/GitHub/GraphNN/Main/GraphEncoder.R', encoding = 'UTF-8')
result=GraphEncoder(as.matrix(g[]),3);
source('C:/Work/Applications/GitHub/GraphNN/Main/GraphEncoder.R', encoding = 'UTF-8')
result=GraphEncoder(as.matrix(g[]),3);
source('C:/Work/Applications/GitHub/GraphNN/Main/GraphEncoder.R', encoding = 'UTF-8')
result=GraphEncoder(as.matrix(g[]),3);
source('C:/Work/Applications/GitHub/GraphNN/Main/GraphEncoder.R', encoding = 'UTF-8')
result=GraphEncoder(as.matrix(g[]),3);
Y=c(-1,1,2,-1)
indT=(Y>0)
Y[!indT,]=0;
Y[!indT]=0;
source('C:/Work/Applications/GitHub/GraphNN/Main/GraphEncoder.R', encoding = 'UTF-8')
result=GraphEncoder(as.matrix(g[]),3);
source('C:/Work/Applications/GitHub/GraphNN/Main/GraphEncoder.R', encoding = 'UTF-8')
result=GraphEncoder(as.matrix(g[]),3);
source('C:/Work/Applications/GitHub/GraphNN/Main/GraphEncoder.R', encoding = 'UTF-8')
result=GraphEncoder(as.matrix(g[]),3);
source('C:/Work/Applications/GitHub/GraphNN/Main/GraphEncoder.R', encoding = 'UTF-8')
result=GraphEncoder(as.matrix(g[]),3);
source('C:/Work/Applications/GitHub/GraphNN/Main/GraphEncoder.R', encoding = 'UTF-8')
result=GraphEncoder(as.matrix(g[]),3);
source('C:/Work/Applications/GitHub/GraphNN/Main/GraphEncoder.R', encoding = 'UTF-8')
result=GraphEncoder(as.matrix(g[]),3);
source('C:/Work/Applications/GitHub/GraphNN/Main/GraphEncoder.R', encoding = 'UTF-8')
result=GraphEncoder(as.matrix(g[]),3);
source('C:/Work/Applications/GitHub/GraphNN/Main/GraphEncoder.R', encoding = 'UTF-8')
result=GraphEncoder(as.matrix(g[]),3);
source('C:/Work/Applications/GitHub/GraphNN/Main/GraphEncoder.R', encoding = 'UTF-8')
result=GraphEncoder(as.matrix(g[]),3);
source('C:/Work/Applications/GitHub/GraphNN/Main/GraphEncoder.R', encoding = 'UTF-8')
result=GraphEncoder(as.matrix(g[]),3);
source('C:/Work/Applications/GitHub/GraphNN/Main/GraphEncoder.R', encoding = 'UTF-8')
result=GraphEncoder(as.matrix(g[]),3);
source('C:/Work/Applications/GitHub/GraphNN/Main/GraphEncoder.R', encoding = 'UTF-8')
result=GraphEncoder(as.matrix(g[]),3);
source('C:/Work/Applications/GitHub/GraphNN/Main/GraphEncoder.R', encoding = 'UTF-8')
result=GraphEncoder(as.matrix(g[]),3);
source('C:/Work/Applications/GitHub/GraphNN/Main/GraphEncoder.R', encoding = 'UTF-8')
result=GraphEncoder(as.matrix(g[]),3);
source('C:/Work/Applications/GitHub/GraphNN/Main/GraphEncoder.R', encoding = 'UTF-8')
result=GraphEncoder(as.matrix(g[]),3);
source('C:/Work/Applications/GitHub/GraphNN/Main/GraphEncoder.R', encoding = 'UTF-8')
result=GraphEncoder(as.matrix(g[]),3);
source('C:/Work/Applications/GitHub/GraphNN/Main/GraphEncoder.R', encoding = 'UTF-8')
result=GraphEncoder(as.matrix(g[]),3);
source('C:/Work/Applications/GitHub/GraphNN/Main/GraphEncoder.R', encoding = 'UTF-8')
result=GraphEncoder(as.matrix(g[]),3);
source('C:/Work/Applications/GitHub/GraphNN/Main/GraphEncoder.R', encoding = 'UTF-8')
result=GraphEncoder(as.matrix(g[]),3);
source('C:/Work/Applications/GitHub/GraphNN/Main/GraphEncoder.R', encoding = 'UTF-8')
result=GraphEncoder(as.matrix(g[]),3);
source('C:/Work/Applications/GitHub/GraphNN/Main/GraphEncoder.R', encoding = 'UTF-8')
result=GraphEncoder(as.matrix(g[]),3);
source('C:/Work/Applications/GitHub/GraphNN/Main/GraphEncoder.R', encoding = 'UTF-8')
result=GraphEncoder(as.matrix(g[]),3);
source('C:/Work/Applications/GitHub/GraphNN/Main/GraphEncoder.R', encoding = 'UTF-8')
result=GraphEncoder(as.matrix(g[]),3);
source('C:/Work/Applications/GitHub/GraphNN/Main/GraphEncoder.R', encoding = 'UTF-8')
result=GraphEncoder(as.matrix(g[]),3);
source('C:/Work/Applications/GitHub/GraphNN/Main/GraphEncoder.R', encoding = 'UTF-8')
result=GraphEncoder(as.matrix(g[]),3);
source('C:/Work/Applications/GitHub/GraphNN/Main/GraphEncoder.R', encoding = 'UTF-8')
result=GraphEncoder(as.matrix(g[]),3);
source('C:/Work/Applications/GitHub/GraphNN/Main/GraphEncoder.R', encoding = 'UTF-8')
result=GraphEncoder(as.matrix(g[]),3);
result=GraphEncoder(as.matrix(get.data.frame(g)),3);
adj=as.matrix(get.data.frame(g));
result=GraphEncoder(adj,3);
source('C:/Work/Applications/GitHub/GraphNN/Main/GraphEncoder.R', encoding = 'UTF-8')
result=GraphEncoder(adj,3);
n <- 150
K <- 3
nrho <- rep(n, K)
n <- sum(nrho)
set.seed(1234)
B <- rbind(c(.1,.01,.05),
c(.01,.1,.025),
c(.05,.025,.15))
rho <- rep(1/3,K)
Y <- rep(1:K, each=n/K)
g <- sample_sbm(n, B, nrho); #summary(g)
V(g)$name <- 1:vcount(g); V(g)$color <- Y; summary(g)
adj=as.matrix(get.data.frame(g));
result=GraphEncoder(adj,3);
adjustedRandIndex(Y, result$Y)
result=GraphEncoder(adj,3);
adjustedRandIndex(Y, result$Y)
result=GraphEncoder(adj,3);
adjustedRandIndex(Y, result$Y)
result=GraphEncoder(adj);
source('C:/Work/Applications/GitHub/GraphNN/Main/GraphEncoder.R', encoding = 'UTF-8')
result=GraphEncoder(adj);
source('C:/Work/Applications/GitHub/GraphNN/Main/GraphEncoder.R', encoding = 'UTF-8')
result=GraphEncoder(adj);
source('C:/Work/Applications/GitHub/GraphNN/Main/GraphEncoder.R', encoding = 'UTF-8')
result=GraphEncoder(adj);
adjustedRandIndex(Y, result$Y)
result=GraphEncoder(adj);
adjustedRandIndex(Y, result$Y)
result=GraphEncoder(adj,2);
result=GraphEncoder(adj,3);
result=GraphEncoder(adj,4);
result=GraphEncoder(adj,5);
result=GraphEncoder(adj,6);
result=GraphEncoder(adj,10);
result=GraphEncoder(adj,20);
result=GraphEncoder(adj,2);
result=GraphEncoder(adj,3);
source('C:/Work/Applications/GitHub/GraphNN/Main/GraphEncoder.R', encoding = 'UTF-8')
result=GraphEncoder(adj,2);
result=GraphEncoder(adj,3);
source('C:/Work/Applications/GitHub/GraphNN/Main/GraphEncoder.R', encoding = 'UTF-8')
result=GraphEncoder(adj,2);
result=GraphEncoder(adj,3);
source('C:/Work/Applications/GitHub/GraphNN/Main/GraphEncoder.R', encoding = 'UTF-8')
result=GraphEncoder(adj,2);
source('C:/Work/Applications/GitHub/GraphNN/Main/GraphEncoder.R', encoding = 'UTF-8')
result=GraphEncoder(adj,2);
result=GraphEncoder(adj,3);
result=GraphEncoder(adj,2);
result=GraphEncoder(adj,3);
result=GraphEncoder(adj,2);
result=GraphEncoder(adj,3);
result=GraphEncoder(adj,2);
result=GraphEncoder(adj,3);
n <- 1000
K <- 3
nrho <- rep(n, K)
n <- sum(nrho)
set.seed(1234)
B <- rbind(c(.1,.01,.05),
c(.01,.1,.025),
c(.05,.025,.15))
rho <- rep(1/3,K)
Y <- rep(1:K, each=n/K)
g <- sample_sbm(n, B, nrho); #summary(g)
V(g)$name <- 1:vcount(g); V(g)$color <- Y; summary(g)
source('C:/Work/Applications/GitHub/GraphNN/Main/GraphEncoder.R', encoding = 'UTF-8')
X=as.matrix(get.data.frame(g));
result=GraphEncoder(adj,3);
result=GraphEncoder(X,3);
result=GraphEncoder(X,2);
adjustedRandIndex(Y, result$Y)
result=GraphEncoder(X,3);
adjustedRandIndex(Y, result$Y)
n <- 500
K <- 3
nrho <- rep(n, K)
n <- sum(nrho)
set.seed(1234)
B <- rbind(c(.1,.01,.05),
c(.01,.1,.025),
c(.05,.025,.15))
rho <- rep(1/3,K)
Y <- rep(1:K, each=n/K)
g <- sample_sbm(n, B, nrho); #summary(g)
V(g)$name <- 1:vcount(g); V(g)$color <- Y; summary(g)
X=as.matrix(get.data.frame(g));
result=GraphEncoder(X);
adjustedRandIndex(Y, result$Y)
n <- 1000
K <- 3
nrho <- rep(n, K)
n <- sum(nrho)
set.seed(1234)
B <- rbind(c(.1,.01,.05),
c(.01,.1,.025),
c(.05,.025,.15))
rho <- rep(1/3,K)
Y <- rep(1:K, each=n/K)
g <- sample_sbm(n, B, nrho); #summary(g)
V(g)$name <- 1:vcount(g); V(g)$color <- Y; summary(g)
X=as.matrix(get.data.frame(g));
result=GraphEncoder(X);
adjustedRandIndex(Y, result$Y)
sqrt(10/2)
n <- 150
K <- 3
nrho <- rep(n, K)
n <- sum(nrho)
set.seed(1234)
B <- rbind(c(.1,.01,.05),
c(.01,.1,.025),
c(.05,.025,.15))
rho <- rep(1/3,K)
Y <- rep(1:K, each=n/K)
g <- sample_sbm(n, B, nrho); #summary(g)
V(g)$name <- 1:vcount(g); V(g)$color <- Y; summary(g)
source('C:/Work/Applications/GitHub/GraphNN/Main/GraphEncoder.R')
n <- 150
K <- 3
nrho <- rep(n, K)
n <- sum(nrho)
set.seed(1234)
B <- rbind(c(.1,.01,.05),
c(.01,.1,.025),
c(.05,.025,.15))
rho <- rep(1/3,K)
Y <- rep(1:K, each=n/K)
g <- sample_sbm(n, B, nrho); #summary(g)
V(g)$name <- 1:vcount(g); V(g)$color <- Y; summary(g)
X=as.matrix(get.data.frame(g));
r=GraphEncoder(X,2);
source('C:/Work/Applications/GitHub/GraphNN/Main/GraphEncoder.R')
r=GraphEncoder(X,2);
r=GraphEncoder(X,3);
r=GraphEncoder(X,4);
r=GraphEncoder(X,2:20);
n <- 1000
K <- 3
nrho <- rep(n, K)
n <- sum(nrho)
set.seed(1234)
B <- rbind(c(.1,.01,.05),
c(.01,.1,.025),
c(.05,.025,.15))
rho <- rep(1/3,K)
Y <- rep(1:K, each=n/K)
g <- sample_sbm(n, B, nrho); #summary(g)
V(g)$name <- 1:vcount(g); V(g)$color <- Y; summary(g)
r=GraphEncoder(X,2);
r=GraphEncoder(X,3);
r=GraphEncoder(X,4);
r=GraphEncoder(X,5);
r=GraphEncoder(X,2);
source('C:/Work/Applications/GitHub/GraphNN/Main/GraphEncoder.R')
r=GraphEncoder(X,2);
r=GraphEncoder(X,3);
r=GraphEncoder(X,4);
r=GraphEncoder(X,5);
n <- 3000
K <- 3
nrho <- rep(n, K)
n <- sum(nrho)
set.seed(1234)
B <- rbind(c(.1,.01,.05),
c(.01,.1,.025),
c(.05,.025,.15))
rho <- rep(1/3,K)
Y <- rep(1:K, each=n/K)
g <- sample_sbm(n, B, nrho); #summary(g)
V(g)$name <- 1:vcount(g); V(g)$color <- Y; summary(g)
n <- 1000
K <- 3
nrho <- rep(n, K)
n <- sum(nrho)
set.seed(1234)
B <- rbind(c(.1,.01,.05),
c(.01,.1,.025),
c(.05,.025,.15))
rho <- rep(1/3,K)
Y <- rep(1:K, each=n/K)
g <- sample_sbm(n, B, nrho); #summary(g)
V(g)$name <- 1:vcount(g); V(g)$color <- Y; summary(g)
X=as.matrix(get.data.frame(g));
r=GraphEncoder(X,2);
r=GraphEncoder(X,3);
r=GraphEncoder(X,4);
r=GraphEncoder(X,3);
r=GraphEncoder(X,2);
n <- 1500
K <- 3
nrho <- rep(n, K)
n <- sum(nrho)
set.seed(1234)
B <- rbind(c(.1,.01,.05),
c(.01,.1,.025),
c(.05,.025,.15))
rho <- rep(1/3,K)
Y <- rep(1:K, each=n/K)
g <- sample_sbm(n, B, nrho); #summary(g)
V(g)$name <- 1:vcount(g); V(g)$color <- Y; summary(g)
X=as.matrix(get.data.frame(g));
r=GraphEncoder(X,2);
r=GraphEncoder(X,3);
source('C:/Work/Applications/GitHub/GraphNN/Main/GraphEncoder.R')
r=GraphEncoder(X,3);
r=GraphEncoder(X,2);
